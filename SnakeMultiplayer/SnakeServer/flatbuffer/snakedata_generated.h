// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_SNAKEDATA_SNAKEDATA_H_
#define FLATBUFFERS_GENERATED_SNAKEDATA_SNAKEDATA_H_

#include "include/flatbuffers/flatbuffers.h"

namespace snakedata {

struct point;

struct snakebodydata;

struct boarddata;

MANUALLY_ALIGNED_STRUCT(4) point FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  point(int32_t _x, int32_t _y)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)) { }

  int32_t x() const { return flatbuffers::EndianScalar(x_); }
  int32_t y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(point, 8);

struct snakebodydata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BOARD = 4
  };
  const boarddata *board() const { return GetPointer<const boarddata *>(VT_BOARD); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BOARD) &&
           verifier.VerifyTable(board()) &&
           verifier.EndTable();
  }
};

struct snakebodydataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_board(flatbuffers::Offset<boarddata> board) { fbb_.AddOffset(snakebodydata::VT_BOARD, board); }
  snakebodydataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  snakebodydataBuilder &operator=(const snakebodydataBuilder &);
  flatbuffers::Offset<snakebodydata> Finish() {
    auto o = flatbuffers::Offset<snakebodydata>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<snakebodydata> Createsnakebodydata(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<boarddata> board = 0) {
  snakebodydataBuilder builder_(_fbb);
  builder_.add_board(board);
  return builder_.Finish();
}

struct boarddata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_WIDTH = 4,
    VT_HEIGHT = 6
  };
  int32_t width() const { return GetField<int32_t>(VT_WIDTH, 0); }
  int32_t height() const { return GetField<int32_t>(VT_HEIGHT, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           verifier.EndTable();
  }
};

struct boarddataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) { fbb_.AddElement<int32_t>(boarddata::VT_WIDTH, width, 0); }
  void add_height(int32_t height) { fbb_.AddElement<int32_t>(boarddata::VT_HEIGHT, height, 0); }
  boarddataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  boarddataBuilder &operator=(const boarddataBuilder &);
  flatbuffers::Offset<boarddata> Finish() {
    auto o = flatbuffers::Offset<boarddata>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<boarddata> Createboarddata(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t width = 0,
   int32_t height = 0) {
  boarddataBuilder builder_(_fbb);
  builder_.add_height(height);
  builder_.add_width(width);
  return builder_.Finish();
}

inline const snakedata::snakebodydata *Getsnakebodydata(const void *buf) { return flatbuffers::GetRoot<snakedata::snakebodydata>(buf); }

inline bool VerifysnakebodydataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<snakedata::snakebodydata>(); }

inline void FinishsnakebodydataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<snakedata::snakebodydata> root) { fbb.Finish(root); }

}  // namespace snakedata

#endif  // FLATBUFFERS_GENERATED_SNAKEDATA_SNAKEDATA_H_
