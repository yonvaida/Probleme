// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakedata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "snakedata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace snakedata {

namespace {

const ::google::protobuf::Descriptor* snakebody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  snakebody_reflection_ = NULL;
const ::google::protobuf::Descriptor* snakefood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  snakefood_reflection_ = NULL;
const ::google::protobuf::Descriptor* table_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  table_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_snakedata_2eproto() {
  protobuf_AddDesc_snakedata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "snakedata.proto");
  GOOGLE_CHECK(file != NULL);
  snakebody_descriptor_ = file->message_type(0);
  static const int snakebody_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakebody, pointx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakebody, pointy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakebody, snakelength_),
  };
  snakebody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      snakebody_descriptor_,
      snakebody::default_instance_,
      snakebody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakebody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakebody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(snakebody));
  snakefood_descriptor_ = file->message_type(1);
  static const int snakefood_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakefood, snakefoodx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakefood, snakefoody_),
  };
  snakefood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      snakefood_descriptor_,
      snakefood::default_instance_,
      snakefood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakefood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(snakefood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(snakefood));
  table_descriptor_ = file->message_type(2);
  static const int table_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table, tablex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table, tabley_),
  };
  table_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      table_descriptor_,
      table::default_instance_,
      table_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(table, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(table));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_snakedata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    snakebody_descriptor_, &snakebody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    snakefood_descriptor_, &snakefood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    table_descriptor_, &table::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_snakedata_2eproto() {
  delete snakebody::default_instance_;
  delete snakebody_reflection_;
  delete snakefood::default_instance_;
  delete snakefood_reflection_;
  delete table::default_instance_;
  delete table_reflection_;
}

void protobuf_AddDesc_snakedata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017snakedata.proto\022\tsnakedata\"@\n\tsnakebod"
    "y\022\016\n\006pointX\030\001 \003(\005\022\016\n\006pointY\030\002 \003(\005\022\023\n\013sna"
    "kelength\030\003 \002(\005\"3\n\tsnakefood\022\022\n\nsnakefood"
    "X\030\001 \002(\005\022\022\n\nsnakefoodY\030\002 \002(\005\"\'\n\005table\022\016\n\006"
    "tableX\030\001 \002(\005\022\016\n\006tableY\030\002 \002(\005", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "snakedata.proto", &protobuf_RegisterTypes);
  snakebody::default_instance_ = new snakebody();
  snakefood::default_instance_ = new snakefood();
  table::default_instance_ = new table();
  snakebody::default_instance_->InitAsDefaultInstance();
  snakefood::default_instance_->InitAsDefaultInstance();
  table::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_snakedata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_snakedata_2eproto {
  StaticDescriptorInitializer_snakedata_2eproto() {
    protobuf_AddDesc_snakedata_2eproto();
  }
} static_descriptor_initializer_snakedata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int snakebody::kPointXFieldNumber;
const int snakebody::kPointYFieldNumber;
const int snakebody::kSnakelengthFieldNumber;
#endif  // !_MSC_VER

snakebody::snakebody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void snakebody::InitAsDefaultInstance() {
}

snakebody::snakebody(const snakebody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void snakebody::SharedCtor() {
  _cached_size_ = 0;
  snakelength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

snakebody::~snakebody() {
  SharedDtor();
}

void snakebody::SharedDtor() {
  if (this != default_instance_) {
  }
}

void snakebody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* snakebody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return snakebody_descriptor_;
}

const snakebody& snakebody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakedata_2eproto();
  return *default_instance_;
}

snakebody* snakebody::default_instance_ = NULL;

snakebody* snakebody::New() const {
  return new snakebody;
}

void snakebody::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    snakelength_ = 0;
  }
  pointx_.Clear();
  pointy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool snakebody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pointX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pointx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pointx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pointX;
        if (input->ExpectTag(16)) goto parse_pointY;
        break;
      }

      // repeated int32 pointY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pointy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pointy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointY;
        if (input->ExpectTag(24)) goto parse_snakelength;
        break;
      }

      // required int32 snakelength = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snakelength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snakelength_)));
          set_has_snakelength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void snakebody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pointX = 1;
  for (int i = 0; i < this->pointx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pointx(i), output);
  }

  // repeated int32 pointY = 2;
  for (int i = 0; i < this->pointy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pointy(i), output);
  }

  // required int32 snakelength = 3;
  if (has_snakelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->snakelength(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* snakebody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pointX = 1;
  for (int i = 0; i < this->pointx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pointx(i), target);
  }

  // repeated int32 pointY = 2;
  for (int i = 0; i < this->pointy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pointy(i), target);
  }

  // required int32 snakelength = 3;
  if (has_snakelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->snakelength(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int snakebody::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 snakelength = 3;
    if (has_snakelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snakelength());
    }

  }
  // repeated int32 pointX = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pointx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pointx(i));
    }
    total_size += 1 * this->pointx_size() + data_size;
  }

  // repeated int32 pointY = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pointy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pointy(i));
    }
    total_size += 1 * this->pointy_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void snakebody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const snakebody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const snakebody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void snakebody::MergeFrom(const snakebody& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointx_.MergeFrom(from.pointx_);
  pointy_.MergeFrom(from.pointy_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_snakelength()) {
      set_snakelength(from.snakelength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void snakebody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snakebody::CopyFrom(const snakebody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snakebody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void snakebody::Swap(snakebody* other) {
  if (other != this) {
    pointx_.Swap(&other->pointx_);
    pointy_.Swap(&other->pointy_);
    std::swap(snakelength_, other->snakelength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata snakebody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = snakebody_descriptor_;
  metadata.reflection = snakebody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int snakefood::kSnakefoodXFieldNumber;
const int snakefood::kSnakefoodYFieldNumber;
#endif  // !_MSC_VER

snakefood::snakefood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void snakefood::InitAsDefaultInstance() {
}

snakefood::snakefood(const snakefood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void snakefood::SharedCtor() {
  _cached_size_ = 0;
  snakefoodx_ = 0;
  snakefoody_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

snakefood::~snakefood() {
  SharedDtor();
}

void snakefood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void snakefood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* snakefood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return snakefood_descriptor_;
}

const snakefood& snakefood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakedata_2eproto();
  return *default_instance_;
}

snakefood* snakefood::default_instance_ = NULL;

snakefood* snakefood::New() const {
  return new snakefood;
}

void snakefood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snakefoodx_ = 0;
    snakefoody_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool snakefood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 snakefoodX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snakefoodx_)));
          set_has_snakefoodx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_snakefoodY;
        break;
      }

      // required int32 snakefoodY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_snakefoodY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snakefoody_)));
          set_has_snakefoody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void snakefood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 snakefoodX = 1;
  if (has_snakefoodx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->snakefoodx(), output);
  }

  // required int32 snakefoodY = 2;
  if (has_snakefoody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->snakefoody(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* snakefood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 snakefoodX = 1;
  if (has_snakefoodx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->snakefoodx(), target);
  }

  // required int32 snakefoodY = 2;
  if (has_snakefoody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->snakefoody(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int snakefood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 snakefoodX = 1;
    if (has_snakefoodx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snakefoodx());
    }

    // required int32 snakefoodY = 2;
    if (has_snakefoody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snakefoody());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void snakefood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const snakefood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const snakefood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void snakefood::MergeFrom(const snakefood& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snakefoodx()) {
      set_snakefoodx(from.snakefoodx());
    }
    if (from.has_snakefoody()) {
      set_snakefoody(from.snakefoody());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void snakefood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void snakefood::CopyFrom(const snakefood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool snakefood::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void snakefood::Swap(snakefood* other) {
  if (other != this) {
    std::swap(snakefoodx_, other->snakefoodx_);
    std::swap(snakefoody_, other->snakefoody_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata snakefood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = snakefood_descriptor_;
  metadata.reflection = snakefood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int table::kTableXFieldNumber;
const int table::kTableYFieldNumber;
#endif  // !_MSC_VER

table::table()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void table::InitAsDefaultInstance() {
}

table::table(const table& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void table::SharedCtor() {
  _cached_size_ = 0;
  tablex_ = 0;
  tabley_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

table::~table() {
  SharedDtor();
}

void table::SharedDtor() {
  if (this != default_instance_) {
  }
}

void table::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* table::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return table_descriptor_;
}

const table& table::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_snakedata_2eproto();
  return *default_instance_;
}

table* table::default_instance_ = NULL;

table* table::New() const {
  return new table;
}

void table::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tablex_ = 0;
    tabley_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool table::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablex_)));
          set_has_tablex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableY;
        break;
      }

      // required int32 tableY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tabley_)));
          set_has_tabley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void table::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableX = 1;
  if (has_tablex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tablex(), output);
  }

  // required int32 tableY = 2;
  if (has_tabley()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tabley(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* table::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tableX = 1;
  if (has_tablex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tablex(), target);
  }

  // required int32 tableY = 2;
  if (has_tabley()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tabley(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int table::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableX = 1;
    if (has_tablex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablex());
    }

    // required int32 tableY = 2;
    if (has_tabley()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tabley());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void table::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const table* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const table*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void table::MergeFrom(const table& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablex()) {
      set_tablex(from.tablex());
    }
    if (from.has_tabley()) {
      set_tabley(from.tabley());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void table::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table::CopyFrom(const table& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void table::Swap(table* other) {
  if (other != this) {
    std::swap(tablex_, other->tablex_);
    std::swap(tabley_, other->tabley_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata table::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = table_descriptor_;
  metadata.reflection = table_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace snakedata

// @@protoc_insertion_point(global_scope)
