// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snakedata.proto

#ifndef PROTOBUF_snakedata_2eproto__INCLUDED
#define PROTOBUF_snakedata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace snakedata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_snakedata_2eproto();
void protobuf_AssignDesc_snakedata_2eproto();
void protobuf_ShutdownFile_snakedata_2eproto();

class snakebody;
class snakefood;
class table;

// ===================================================================

class snakebody : public ::google::protobuf::Message {
 public:
  snakebody();
  virtual ~snakebody();

  snakebody(const snakebody& from);

  inline snakebody& operator=(const snakebody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const snakebody& default_instance();

  void Swap(snakebody* other);

  // implements Message ----------------------------------------------

  snakebody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const snakebody& from);
  void MergeFrom(const snakebody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 pointX = 1;
  inline int pointx_size() const;
  inline void clear_pointx();
  static const int kPointXFieldNumber = 1;
  inline ::google::protobuf::int32 pointx(int index) const;
  inline void set_pointx(int index, ::google::protobuf::int32 value);
  inline void add_pointx(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pointx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pointx();

  // repeated int32 pointY = 2;
  inline int pointy_size() const;
  inline void clear_pointy();
  static const int kPointYFieldNumber = 2;
  inline ::google::protobuf::int32 pointy(int index) const;
  inline void set_pointy(int index, ::google::protobuf::int32 value);
  inline void add_pointy(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pointy() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pointy();

  // required int32 snakelength = 3;
  inline bool has_snakelength() const;
  inline void clear_snakelength();
  static const int kSnakelengthFieldNumber = 3;
  inline ::google::protobuf::int32 snakelength() const;
  inline void set_snakelength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:snakedata.snakebody)
 private:
  inline void set_has_snakelength();
  inline void clear_has_snakelength();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pointx_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pointy_;
  ::google::protobuf::int32 snakelength_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_snakedata_2eproto();
  friend void protobuf_AssignDesc_snakedata_2eproto();
  friend void protobuf_ShutdownFile_snakedata_2eproto();

  void InitAsDefaultInstance();
  static snakebody* default_instance_;
};
// -------------------------------------------------------------------

class snakefood : public ::google::protobuf::Message {
 public:
  snakefood();
  virtual ~snakefood();

  snakefood(const snakefood& from);

  inline snakefood& operator=(const snakefood& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const snakefood& default_instance();

  void Swap(snakefood* other);

  // implements Message ----------------------------------------------

  snakefood* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const snakefood& from);
  void MergeFrom(const snakefood& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 snakefoodX = 1;
  inline bool has_snakefoodx() const;
  inline void clear_snakefoodx();
  static const int kSnakefoodXFieldNumber = 1;
  inline ::google::protobuf::int32 snakefoodx() const;
  inline void set_snakefoodx(::google::protobuf::int32 value);

  // required int32 snakefoodY = 2;
  inline bool has_snakefoody() const;
  inline void clear_snakefoody();
  static const int kSnakefoodYFieldNumber = 2;
  inline ::google::protobuf::int32 snakefoody() const;
  inline void set_snakefoody(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:snakedata.snakefood)
 private:
  inline void set_has_snakefoodx();
  inline void clear_has_snakefoodx();
  inline void set_has_snakefoody();
  inline void clear_has_snakefoody();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 snakefoodx_;
  ::google::protobuf::int32 snakefoody_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_snakedata_2eproto();
  friend void protobuf_AssignDesc_snakedata_2eproto();
  friend void protobuf_ShutdownFile_snakedata_2eproto();

  void InitAsDefaultInstance();
  static snakefood* default_instance_;
};
// -------------------------------------------------------------------

class table : public ::google::protobuf::Message {
 public:
  table();
  virtual ~table();

  table(const table& from);

  inline table& operator=(const table& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const table& default_instance();

  void Swap(table* other);

  // implements Message ----------------------------------------------

  table* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const table& from);
  void MergeFrom(const table& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableX = 1;
  inline bool has_tablex() const;
  inline void clear_tablex();
  static const int kTableXFieldNumber = 1;
  inline ::google::protobuf::int32 tablex() const;
  inline void set_tablex(::google::protobuf::int32 value);

  // required int32 tableY = 2;
  inline bool has_tabley() const;
  inline void clear_tabley();
  static const int kTableYFieldNumber = 2;
  inline ::google::protobuf::int32 tabley() const;
  inline void set_tabley(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:snakedata.table)
 private:
  inline void set_has_tablex();
  inline void clear_has_tablex();
  inline void set_has_tabley();
  inline void clear_has_tabley();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 tablex_;
  ::google::protobuf::int32 tabley_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_snakedata_2eproto();
  friend void protobuf_AssignDesc_snakedata_2eproto();
  friend void protobuf_ShutdownFile_snakedata_2eproto();

  void InitAsDefaultInstance();
  static table* default_instance_;
};
// ===================================================================


// ===================================================================

// snakebody

// repeated int32 pointX = 1;
inline int snakebody::pointx_size() const {
  return pointx_.size();
}
inline void snakebody::clear_pointx() {
  pointx_.Clear();
}
inline ::google::protobuf::int32 snakebody::pointx(int index) const {
  return pointx_.Get(index);
}
inline void snakebody::set_pointx(int index, ::google::protobuf::int32 value) {
  pointx_.Set(index, value);
}
inline void snakebody::add_pointx(::google::protobuf::int32 value) {
  pointx_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
snakebody::pointx() const {
  return pointx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
snakebody::mutable_pointx() {
  return &pointx_;
}

// repeated int32 pointY = 2;
inline int snakebody::pointy_size() const {
  return pointy_.size();
}
inline void snakebody::clear_pointy() {
  pointy_.Clear();
}
inline ::google::protobuf::int32 snakebody::pointy(int index) const {
  return pointy_.Get(index);
}
inline void snakebody::set_pointy(int index, ::google::protobuf::int32 value) {
  pointy_.Set(index, value);
}
inline void snakebody::add_pointy(::google::protobuf::int32 value) {
  pointy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
snakebody::pointy() const {
  return pointy_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
snakebody::mutable_pointy() {
  return &pointy_;
}

// required int32 snakelength = 3;
inline bool snakebody::has_snakelength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void snakebody::set_has_snakelength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void snakebody::clear_has_snakelength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void snakebody::clear_snakelength() {
  snakelength_ = 0;
  clear_has_snakelength();
}
inline ::google::protobuf::int32 snakebody::snakelength() const {
  return snakelength_;
}
inline void snakebody::set_snakelength(::google::protobuf::int32 value) {
  set_has_snakelength();
  snakelength_ = value;
}

// -------------------------------------------------------------------

// snakefood

// required int32 snakefoodX = 1;
inline bool snakefood::has_snakefoodx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void snakefood::set_has_snakefoodx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void snakefood::clear_has_snakefoodx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void snakefood::clear_snakefoodx() {
  snakefoodx_ = 0;
  clear_has_snakefoodx();
}
inline ::google::protobuf::int32 snakefood::snakefoodx() const {
  return snakefoodx_;
}
inline void snakefood::set_snakefoodx(::google::protobuf::int32 value) {
  set_has_snakefoodx();
  snakefoodx_ = value;
}

// required int32 snakefoodY = 2;
inline bool snakefood::has_snakefoody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void snakefood::set_has_snakefoody() {
  _has_bits_[0] |= 0x00000002u;
}
inline void snakefood::clear_has_snakefoody() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void snakefood::clear_snakefoody() {
  snakefoody_ = 0;
  clear_has_snakefoody();
}
inline ::google::protobuf::int32 snakefood::snakefoody() const {
  return snakefoody_;
}
inline void snakefood::set_snakefoody(::google::protobuf::int32 value) {
  set_has_snakefoody();
  snakefoody_ = value;
}

// -------------------------------------------------------------------

// table

// required int32 tableX = 1;
inline bool table::has_tablex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void table::set_has_tablex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void table::clear_has_tablex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void table::clear_tablex() {
  tablex_ = 0;
  clear_has_tablex();
}
inline ::google::protobuf::int32 table::tablex() const {
  return tablex_;
}
inline void table::set_tablex(::google::protobuf::int32 value) {
  set_has_tablex();
  tablex_ = value;
}

// required int32 tableY = 2;
inline bool table::has_tabley() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void table::set_has_tabley() {
  _has_bits_[0] |= 0x00000002u;
}
inline void table::clear_has_tabley() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void table::clear_tabley() {
  tabley_ = 0;
  clear_has_tabley();
}
inline ::google::protobuf::int32 table::tabley() const {
  return tabley_;
}
inline void table::set_tabley(::google::protobuf::int32 value) {
  set_has_tabley();
  tabley_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace snakedata

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_snakedata_2eproto__INCLUDED
